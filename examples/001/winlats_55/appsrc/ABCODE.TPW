#!-------------------------------------------------------------------------
#CODE(ControlValueValidation,'Control Value Validation'),HLP('~TPLCodeControlValueValidation')
#RESTRICT
  #CASE(%ControlType)
  #OF('ENTRY')
  #OROF('SPIN')
  #OROF('COMBO')
    #CASE(%ControlEvent)
    #OF('Accepted')
    #OROF('Selected')
      #ACCEPT
    #ELSE
      #REJECT
    #ENDCASE
  #ELSE
    #REJECT
  #ENDCASE
#ENDRESTRICT
#DISPLAY('This Code Template is used to perform a control value')
#DISPLAY('validation.  This Code Template only works for')
#DISPLAY('the Selected or Accepted Events for an Entry Control.')
#DISPLAY('')
#PROMPT('Lookup Key',KEY),%LookupKey,REQ
#PROMPT('Lookup Field',COMPONENT(%LookupKey)),%LookupField,REQ
#PROMPT('Lookup Procedure',PROCEDURE),%LookupProcedure
#DISPLAY('')
#DISPLAY('The Lookup Key is the key used to perform the value validation.')
#DISPLAY('If the Lookup Key is a multi-component key, you must insure that')
#DISPLAY('other key elements are primed BEFORE this Code Template is used.')
#DISPLAY('')
#DISPLAY('The Lookup field must be a component of the Lookup Key.  Before execution')
#DISPLAY('of the lookup code, this field will be assigned the value of the control being')
#DISPLAY('validated, and the control will be assigned the value of the lookup field if')
#DISPLAY('the Lookup procedure is successful.')
#DISPLAY('')
#DISPLAY('The Lookup Procedure is called to let the user to select a value.  Request')
#DISPLAY('upon entrance to the Lookup will be set to SelectRecord, and successful')
#DISPLAY('completion is signalled when Response = RequestCompleted.')
#IF(%ControlEvent='Accepted')
 IF %ControlUse OR %Control{Prop:Req} <> False
#ENDIF
   %LookupField = %ControlUse                        #<! Move value for lookup
#FIND(%Field,%LookupField)                           #! FIX field for lookup
   IF Access:%File.TryFetch(%LookupKey)              #<! IF record not found
     GlobalRequest = SelectRecord                    #<! Set Action for Lookup
     %LookupProcedure                                #<! Call Lookup Procedure
     IF GlobalResponse = RequestCompleted            #<! IF Lookup successful
       GlobalResponse = RequestCancelled             #<! Clear the Action Value
       %ControlUse = %LookupField                    #<! Move value to control field
#IF(%ControlEvent='Accepted')                        #! IF a Post-Edit Validation
     ELSE                                            #<! ELSE (IF Lookup NOT...)
       SELECT(%Control)                              #<! Select the control
       CYCLE                                         #<! Go back to ACCEPT
#ENDIF                                               #! END (IF a Pre-Edit...)
     END                                             #<! END (IF Lookup successful)
#IF(%ControlEvent='Selected')                        #! IF a Pre-Edit Validation
     SELECT(%Control)                                #<! Select the control
#ENDIF                                               #! END (IF a Pre-Edit...)
   END                                               #<! END (IF record not found)
#IF(%ControlEvent='Accepted')
 END
#ELSIF (%ControlEvent<>'Selected')
  #ERROR('Value Validation Code Template must be used for Accepted or Selected Control Events!')
#ENDIF
#!-------------------------------------------------------------------------
#CODE(InitiateThread,'Initiate Thread Execution'),HLP('~TPLCodeInitiateThread')
#DISPLAY('This Code Template is used to initiate a Thread.  The')
#DISPLAY('code generated will follow the format:')
#DISPLAY('')
#DISPLAY('IF NOT START(Procedure)')
#DISPLAY('  Error Handling')
#DISPLAY('END')
#DISPLAY('')
#PROMPT('Procedure Name:',PROCEDURE),%ThreadProcedure
#PROMPT('Thread Stack:',SPIN(@n7,5000,64000,500)),%ThreadStack,DEFAULT(25000)
#PROMPT('Error Handling',@S255),%ThreadError
#IF(%ThreadError)                                 #! IF Thread Error provided
  #IF(%ThreadStack)
 IF NOT START(%ThreadProcedure,%ThreadStack)       #<! IF Thread not initiated
  #ELSE
 IF NOT START(%ThreadProcedure)                    #<! IF Thread not initiated
  #ENDIF
   %ThreadError                                    #<! Perform the error code
 END                                               #<! END (IF Thread not...)
#ELSE                                             #! ELSE (IF NOT Thread Error...)
  #IF(%ThreadStack)
 START(%ThreadProcedure,%ThreadStack)              #<! Initiate the Thread
  #ELSE
 START(%ThreadProcedure)                          #<! Initiate the Thread
  #ENDIF
#ENDIF                                            #! END (IF Thread Error...)
#!-------------------------------------------------------------------------
#CODE(LookupNonRelatedRecord,'Lookup Non-Related Record'),HLP('~TPLCodeLookupNonRelatedRecord')
#DISPLAY('This Code Template retrieves a non-related record from a file.')
#DISPLAY('')
#PROMPT('Lookup Key',KEY),%LookupKey,REQ
#PROMPT('Lookup Field',COMPONENT(%LookupKey)),%LookupField,REQ
#PROMPT('Related Field',FIELD),%RelatedField,REQ
#DISPLAY('')
#DISPLAY('The Lookup Key is the key used to perform the lookup.  If the Lookup')
#DISPLAY('Key is a multi-component key, you must insure that the other key')
#DISPLAY('elements are primed BEFORE this Code Template is executed.')
#DISPLAY('')
#DISPLAY('The Lookup field must be a component of the Lookup Key.  Before execution')
#DISPLAY('of the lookup code, this field will be assigned the value of the related field.')
#DISPLAY('')
#DISPLAY('The Related field is a component of the primary file, which relates to the')
#DISPLAY('lookup field.')
#DISPLAY('')
 %LookupField = %RelatedField                      #<! Move value for lookup
#FIND(%Field,%LookupField)                         #! FIX field for lookup
 Access:%File.Fetch(%LookupKey)                   #<! Get value from file
#!-------------------------------------------------------------------------
#CODE(CallProcedureAsLookup,'Call Procedure as Lookup'),HLP('~TPLCodeCallProcedureAsLookup')
#DISPLAY('This Code Template calls a procedure as a lookup.')
#DISPLAY('')
#PROMPT('Lookup Procedure',PROCEDURE),%LookupProcedure,REQ
#PROMPT('Code Before',@S255),%CodeBeforeLookup
#PROMPT('Code After, Completed',@S255),%CodeOnComplete
#PROMPT('Code After, Cancelled',@S255),%CodeOnCancel
#DISPLAY('')
#DISPLAY('This Code Template is used to call any procedure as a "Lookup."  Before')
#DISPLAY('the call is made the global variable "GlobalRequest" is set to a value of')
#DISPLAY('SelectRecord.')
#DISPLAY('')
#DISPLAY('The value of GlobalResponse upon return from the called procedure')
#DISPLAY('determines if the lookup is considered "Completed".  A GlobalResponse')
#DISPLAY('value of 1 (RequestCompleted) indicates that the lookup was successful.')
#DISPLAY('Any other value indicates that the lookup was cancelled.')
#DISPLAY('')
#DISPLAY('The GlobalResponse variable should be used in any EMBED code after')
#DISPLAY('this Code Template to check for Lookup completion.')
#DISPLAY('')
#DISPLAY('A Browse Template procedure automatically senses if an GlobalRequest of')
#DISPLAY('SelectRecord and functions accordingly.')
#IF(%CodeBeforeLookup)
 %CodeBeforeLookup                                 #<! Source before Lookup
#ENDIF
 GlobalRequest = SelectRecord                      #<! Set Action for Lookup
 %LookupProcedure                                  #<! Call the Lookup Procedure
#IF(%CodeOnComplete AND %CodeOnCancel)
 IF GlobalResponse = RequestCompleted               #<! IF Lookup completed
   %CodeOnComplete                                 #<! Source on Completion
 ELSE                                              #<! ELSE (IF Lookup NOT...)
   %CodeOnCancel                                   #<! Source on Cancellation
 END                                               #<! END (IF Lookup completed)
#ELSIF(%CodeOnComplete)
 IF GlobalResponse = RequestCompleted               #<! IF Lookup completed
   %CodeOnComplete                                 #<! Source on Completion
 END                                               #<! END (IF Lookup completed)
#ELSIF(%CodeOnCancel)
 IF GlobalResponse = RequestCancelled               #<! IF Lookup completed
   %CodeOnCancel                                   #<! Source on Cancellation
 END                                               #<! END (IF Lookup NOT completed)
#ENDIF
 GlobalResponse = RequestCancelled                 #<! Clear Result
#!-------------------------------------------------------------------------
#CODE(CloseCurrentWindow,'Close Current Window and Procedure'),HLP('~TPLCodeCloseCurrentWindow')
#DISPLAY('There are no prompts to fill out for this Code Template.')
#DISPLAY('')
#DISPLAY('This Code Template initiates the triggers the shut-down')
#DISPLAY('of the active procedure.  It does this by triggering')
#DISPLAY('Event:CloseWindow, using the command:')
#DISPLAY('')
#DISPLAY('  POST(Event:CloseWindow)')
#DISPLAY('')
#DISPLAY('Use the Source Point: "Window Event: Close Window" to ')
#DISPLAY('execute any code upon window close down.')
 POST(Event:CloseWindow)
#!
#!-------------------------------------------------------------------------
#!
#CODE (SetProperty,'Set a property on a control'),HLP('~TPLCodeSetProperty')
#PREPARE
  #DECLARE (%Choices),UNIQUE
  #DECLARE (%NextLine)
  #FREE (%Choices)
  #OPEN ('property.clw'),READ
  #READ (%NextLine)
  #LOOP WHILE(%NextLine <> %Eof)
    #! Exclude PROPLIST: properties
    #IF (SUB(%NextLine,1,5) = 'PROP:')
      #ADD (%Choices,SUB(%NextLine,1,INSTRING(' ',%NextLine)-1))
    #END
    #READ (%NextLine)
  #END
  #CLOSE,READ
#ENDPREPARE
#PROMPT ('Control:',FROM(%Control)),%Target
#PROMPT ('Property:',FROM(%Choices)),%Selection
#PROMPT ('Value:',@s255),%TargetValue
%target{%Selection} = %TargetValue
#!
#!-------------------------------------------------------------------------
#!
#!
#CODE (SelectToolbarTarget,'Select target for toolbar'),HLP('~TPLCodeSelectToolbarTarget'),DESCRIPTION('Set toolbar control to '&%GetTargetControlName(1))
#PREPARE
  #PURGE(%InstanceList)
  #FOR (%ActiveTemplate)
    #FOR(%ActiveTemplateInstance)
      #CASE(%ActiveTemplate)
      #OF('BrowseBox(ABC)')
        #ADD(%InstanceList,'BRW'&%ActiveTemplateInstance)
        #SET(%TemplateInstance,%ActiveTemplateInstance)
      #OF('RelationTree(ABC)')
        #ADD(%InstanceList,'REL'&%ActiveTemplateInstance)
        #SET(%TemplateInstance,%ActiveTemplateInstance)
      #OF('SaveButton(ABC)')
        #ADD(%InstanceList,'FORM')
        #SET(%TemplateInstance,-1)
      #ENDCASE
    #ENDFOR
  #ENDFOR
#ENDPREPARE
#BOXED,HIDE
  #PROMPT('',@S255),%InstanceList,MULTI(''),UNIQUE
  #BUTTON(''),FROM(%InstanceList,'')
    #PROMPT('',@n3),%TemplateInstance
  #ENDBUTTON
#ENDBOXED
#PROMPT ('Toolbar Navigation Target:',FROM(%InstanceList)),%TargetChoice
#!
Toolbar.SetTarget(%(%GetTargetControlName()))
#!
#GROUP(%GetTargetControlName,%TextForm=0)
#FOR(%InstanceList),WHERE(%InstanceList=%TargetChoice)
  #IF(%TemplateInstance>0)
    #IF(%TextForm)
      #RETURN(%InstanceList)
    #ELSE
      #RETURN(%Control)
    #ENDIF
  #ELSE
    #IF(%TextForm)
      #RETURN(%InstanceList)
    #ELSE
      #RETURN(%TemplateInstance)
    #ENDIF
  #END
#ENDFOR
#!
#!-------------------------------------------------------------------
#!-------------------------------------------------------------------------
#!
#CODE(SetABCProperty,'Set a Property of an ABC Object'),DESCRIPTION(%SetPropertyDescription()),HLP('~TPLCodeSetABCProperty')
#PREPARE
  #CALL(%ReadABCFiles)
  #CALL(%BuildObjectList)
  #IF(~%ObjectName)
    #CLEAR(%PropertyToSet)
  #ENDIF
#ENDPREPARE
#PROMPT('&Object Name: ',COMBO(%ObjectList)),%ObjectName,REQ,HSCROLL,WHENACCEPTED(%BuildPropertyList())
#PROMPT('&Property to Set:',FROM(%PropertyList)),%PropertyToSet,REQ,HSCROLL
#PROMPT('&Value to Set:',@S255),%ValueToSet,REQ
#ENABLE(%PropertyIsReference())
  #PROMPT(' Assign as Reference?',CHECK),%AssignAsReference
#ENDENABLE
#PROMPT('Use &SELF as Object Name',CHECK),%AccessAsSELF
#BUTTON('Application Builder Class &Viewer'),AT(,,180),WHENACCEPTED(%ViewABCs())
#ENDBUTTON
#!
#!
#IF(%PropertyIsReference() AND %AssignAsReference)
  #IF(%AccessAsSELF)
SELF.%PropertyToSet &= %ValueToSet
  #ELSE
%ObjectName.%PropertyToSet &= %ValueToSet
  #ENDIF
#ELSE
  #IF(%AccessAsSELF)
SELF.%PropertyToSet = %ValueToSet
  #ELSE
%ObjectName.%PropertyToSet = %ValueToSet
  #ENDIF
#ENDIF
#IF(%ObjectListType=%FileManagerType)                        #!This code ensures that if a global filemanger is used, the file is flagged as used
  #ADD(%UsedFile,SLICE(%ObjectName,INSTRING(':',%ObjectName,1,1)+1,LEN(%ObjectName)))
#ENDIF
#!
#!
#GROUP(%PropertyIsReference),AUTO
#EQUATE(%SaveClass,%pClassName)                               #!This Prevents destruction of the current value of %pClassName
#CALL(%FixClassName,%ObjectListType)
#FOR(%pClassProperty),WHERE(UPPER(%pClassProperty)=UPPER(%PropertytoSet))
  #IF(SUB(%pClassPropertyPrototype,1,1)='&')
    #FIX(%pClassName,%SaveClass)
    #RETURN(%True)
  #ENDIF
#ENDFOR
#FIX(%pClassName,%SaveClass)
#RETURN(%False)
#!
#!
#GROUP(%SetPropertyDescription)
#IF(%PropertyIsReference() AND %AssignAsReference)
  #RETURN('Set Property: '&%ObjectName&'.'&%PropertyToSet&' &= '&%ValueToSet)
#ELSE
  #RETURN('Set Property: '&%ObjectName&'.'&%PropertyToSet&' = '&%ValueToSet)
#ENDIF
#!
#!
#!
#!-------------------------------------------------------------------------
#!
#CODE(CallABCMethod,'Call a Method of an ABC Object'),DESCRIPTION('Method Call: '&%ObjectName&'.'&%CallSyntax()),HLP('~TPLCodeCallABCMethod')
#PREPARE
  #CALL(%ReadABCFiles)
  #CALL(%BuildObjectList)
  #IF(~%ObjectName)
    #CLEAR(%MethodToCall)
  #ENDIF
#ENDPREPARE
#PROMPT('&Object Name: ',COMBO(%ObjectList)),%ObjectName,REQ,HSCROLL,WHENACCEPTED(%BuildMethodList())
#PROMPT('&Method to Call:',FROM(%MethodList)),%MethodToCall,REQ,HSCROLL
#PROMPT('&Passed Parameters',@S255),%PassedParameters
#ENABLE(%ReturnValueRequired())
  #PROMPT('&Return Value Assignment:',@S64),%ReturnValueAssignment
  #VALIDATE(%ValidateReturnValueAssignment(%MethodToCall,%ReturnValueAssignment),'Return value assignment required')
#ENDENABLE
#PROMPT('Use &SELF as Object Name',CHECK),%CallAsSELF
#BUTTON('Application Builder Class &Viewer'),AT(,,180),WHENACCEPTED(%ViewABCs())
#ENDBUTTON
#!
#IF(%ReturnValueRequired() AND %ReturnValueAssignment)
  #IF(%CallAsSELF)
%ReturnValueAssignment = SELF.%(%CallSyntax())
  #ELSE
%ReturnValueAssignment = %ObjectName.%(%CallSyntax())
  #ENDIF
#ELSE
  #IF(%CallAsSELF)
SELF.%(%CallSyntax())
  #ELSE
%ObjectName.%(%CallSyntax())
  #ENDIF
#ENDIF
#IF(%ObjectListType=%FileManagerType)                        #!This code ensures that if a global filemanger is used, the file is flagged as used
  #ADD(%UsedFile,SLICE(%ObjectName,INSTRING(':',%ObjectName,1,1)+1,LEN(%ObjectName)))
#ENDIF
#!
#!
#GROUP(%ValidateReturnValueAssignment,%MethodToCall,%ReturnValueAssignment),AUTO
#IF(%ReturnValueAssignment)
  #RETURN(%True)
#ELSE
  #IF(UPPER(SLICE(%MethodToCall,LEN(%MethodToCall)-4,LEN(%MethodToCall)))=',PROC')
    #RETURN(%True)
  #ENDIF
#END
#RETURN(%False)
#!
#!
#GROUP(%CallSyntax),AUTO
#EQUATE(%Lp,INSTRING('(',%MethodToCall,1,1))
#IF(%PassedParameters)
  #RETURN(SUB(%MethodToCall,1,%Lp-1)&%PassedParameters)
#ELSE
  #RETURN(SUB(%MethodToCall,1,%Lp-1)&'()')
#ENDIF
#!
#!
#GROUP(%ReturnValueRequired)
#IF(~%MethodToCall)
  #RETURN(%False)
#ENDIF
#IF(INSTRING(',',%MethodToCall,1,INSTRING(')',%MethodToCall,1,1)+1))
  #RETURN(%True)
#END
#RETURN(%False)
#!
#!
#GROUP(%BuildObjectList)
#FREE(%ObjectList)
#EMBED(%GatherObjects),HIDE
#!
#!
#GROUP(%BuildMethodList)
#PURGE(%MethodList)
#FIX(%ObjectList,%ObjectName)
#IF(%ObjectListType)
  #CALL(%FixClassName,%objectListType)
  #FOR(%pClassMethod)
    #FOR(%pClassMethodPrototype),WHERE(~%pClassMethodPrivate)
      #IF(%pClassMethodProcAttribute)
        #ADD(%MethodList,%pClassMethod&%pClassMethodPrototype&',PROC')
      #ELSE
        #ADD(%MethodList,%pClassMethod&%pClassMethodPrototype)
      #END
    #ENDFOR
  #ENDFOR
#ENDIF
#CLEAR(%MethodToCall)
#!
#!
#GROUP(%BuildPropertyList)
#PURGE(%PropertyList)
#FIX(%ObjectList,%ObjectName)
#IF(%ObjectListType)
  #CALL(%FixClassName,%ObjectListType)
  #FOR(%pClassProperty),WHERE(~%pClassPropertyPrivate)
    #ADD(%PropertyList,%pClassProperty)
  #ENDFOR
#ENDIF
#CLEAR(%PropertyToSet)
#!
#!
